220811

객체지향 프로그래밍에서 자주 사용하는 개념 
객체지향 프로그래밍 : 
JavaScript, Java, C++, Python, Ruby..

오버로딩 : 
메소드 이름은 동일하나 파라미터 개수, 타입은 달라야 성립
오버라이딩 :
인터페이스 혹은 부모 클래스를 상속 받아서 메소드를 재정의 하는 개념 
@Override
@ => 어노테이션 (Spring에서 많이 사용함)

인터페이스 
-인터페이스에서 작성하는 메소드는 무조건 public 
-인터페이스에서는 로직을 구현할 수 없다. 정의만 가능 
-인터페이스를 사용하는 클래스는 무조건 인터페이스에서 정의한 메소드를 
무조건 모두 사용해야 한다. 
-자바에서는 다중상속이 불가능해서 인터페이스로 다중상속을 구현하기도 한다. 
class A implements B 

**제네릭 컬렉션즈
<> : 제네릭
List, Map, Set, Vertor, LinkedList .. => 컬렉션즈 

List<Spring> List = new ArrayList<Spring>();
제네릭 안에는 클래스 타입만 올 수 있다.

list.add(); //데이터 추가
list.get(); //데이터 가져오기
list.remove(); //데이터 삭제
list.size(); //배열길이 가져오기

Map
Map<Spring, Spring> map = new HashMap<String, String>();
왼쪽 Spring : key
오른쪽 Spring : value 
즉, map은 key와 value로 구성된 컬렉션(자료구조)
key는 중복 불가능 
value는 중복가능 
